name: CICD
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:

      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python environmnet
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Cache pip dependencies
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov bandit flake8 -r requirements.txt

      # Run unit testcase with coverage
      - name: Run tests with coverage
        run: |
          pytest --cov=src tests/ --cov-report=xml

      #run security scan
      - name: Run security scan
        run: |
          bandit -r src/


  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:

      #Step1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      #Step2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      #Step3: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/git-gist-app:latest${{github.run_number}}

      #step4: scan Docker image for vulnerabilities
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/git-gist-app:latest${{github.run_number}}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
  deploy:
    name: Deploy to Minikube
    runs-on: self-hosted
    needs: docker
    steps:
      #Step1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      #step2: update image tag in helm chart values.yaml file
      - name: Update image tag in helm chart values.yaml file
        shell: powershell
        run: |
          $filePath = "helm/git-gist-app-chart/values.yaml"
          (Get-Content $filePath) -replace 'tag: "latest"', 'tag: "latest' + $env:GITHUB_RUN_NUMBER + '"' | Set-Content $filePath
          